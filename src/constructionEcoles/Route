package constructionEcoles;

/**
 *Classe Route définit la relation entre deux villes, la route de ville A à ville B et route de ville B à ville A
 *
 * @author thanhcongvo
 * @version 1.0
 */
public class Route {
    private final Ville ville1;
    private final Ville ville2;

    /**
     * Initialisation l'objet Route
     *
     * @param ville1 la première ville
     * @param ville2 la deuxième ville
     */
    public Route(Ville ville1, Ville ville2) {
        this.ville1 = ville1;
        this.ville2 = ville2;
    }


    /**
     * Methode récupère le tableau 2 villes de la route
     *
     * @return un tableau Ville[] se compose de 2 éléments
     */
    public Ville[] getVille() {
        return new Ville[]{ville1, ville2};
    }


    /**
     * Methode equals utilisée pour comparer deux objets, 
     *avoir une valeur lors d'ajouter d'un nouveau élément à une liste Set<Route>, 1 Set est une liste d'éléments ne se chevauche pas, 
     *vérifier de duplication automatiques via cette méthode equals.
     *
     * @param o objet à comparer
     * @return boolean
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Route)) return false;
        return this.hashCode() == o.hashCode(); // retourne une comparaison de 2 hashCode.
    }


    /**
     * Method hashCode définit hashCode de 1 object Route
     *
     * @return int
     */
    @Override
    public int hashCode() {
        return (int) (Math.pow((int) ville1.getKey(), 2) + Math.pow((int) ville2.getKey(), 2)); // hashCode utilisée pour comparer 2 objects ville, donc alors il faut que route(a,b) = route(b,a); on obtient hashCode également à la somme d'un carré de la keya et d'un carré de la keyb
    }
}

